// Get the solar system container
const solarSystem = document.querySelector('.solar-system');

// Get the planets
const planets = document.querySelectorAll('.planet');

// Define the animation duration
const animationDuration = 20000; // 20 seconds

// Define the rotation speed
const rotationSpeed = 0.01; // 1% per frame

// Define the zoom speed
const zoomSpeed = 0.01; // 1% per frame

// Define the pan speed
const panSpeed = 1; // 1 pixel per frame

// Create a function to animate the planets
function animatePlanets() {
    // Get the current time
    const currentTime = new Date().getTime();

    // Calculate the rotation angle
    const rotationAngle = (currentTime % animationDuration) / animationDuration * 360;

    // Calculate the zoom level
    const zoomLevel = 1 + (currentTime % animationDuration) / animationDuration * zoomSpeed;

    // Calculate the pan position
    const panPosition = (currentTime % animationDuration) / animationDuration * panSpeed;

    // Animate the planets
    planets.forEach((planet, index) => {
        // Calculate the planet's rotation angle
        const planetRotationAngle = rotationAngle + index * 30;

        // Calculate the planet's zoom level
        const planetZoomLevel = zoomLevel + index * 0.1;

        // Calculate the planet's pan position
        const planetPanPosition = panPosition + index * 10;

        // Update the planet's transform
        planet.style.transform = `translate(${planetPanPosition}px, ${planetPanPosition}px) rotate(${planetRotationAngle}deg) scale(${planetZoomLevel})`;
    });

    // Request the next frame
    requestAnimationFrame(animatePlanets);
}

// Start the animation
animatePlanets();

// Add event listeners for panning, zooming, and rotating
planets.forEach((planet) => {
    planet.addEventListener('mousedown', (event) => {
        // Get the planet's current transform
        const currentTransform = planet.style.transform;

        // Get the planet's current rotation angle
        const currentRotationAngle = parseFloat(currentTransform.match(/rotate\((\d+)deg\)/)[1]);

        // Get the planet's current zoom level
        const currentZoomLevel = parseFloat(currentTransform.match(/scale\((\d+\.\d+)\)/)[1]);

        // Get the planet's current pan position
        const currentPanPosition = parseFloat(currentTransform.match(/translate\((\d+)px, (\d+)px\)/)[1]);

        // Define the drag function
        function drag(event) {
            // Calculate the new rotation angle
            const newRotationAngle = currentRotationAngle + event.movementX * rotationSpeed;

            // Calculate the new zoom level
            const newZoomLevel = currentZoomLevel + event.movementY * zoomSpeed;

            // Calculate the new pan position
            const newPanPosition = currentPanPosition + event.movementX * panSpeed;

            // Update the planet's transform
            planet.style.transform = `translate(${newPanPosition}px, ${newPanPosition}px) rotate(${newRotationAngle}deg) scale(${newZoomLevel})`;
        }

        // Add the drag event listener
        document.addEventListener('mousemove', drag);

        // Remove the drag event listener on mouseup
        document.addEventListener('mouseup', () => {
            document.removeEventListener('mousemove', drag);
        });
    });
});